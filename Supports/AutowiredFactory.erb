//
//  AutowiredFactory.swift
//  Deli
//

/// The AutowiredFactory protocol is registered automatically, and load the
/// required dependencies from IoC container.
///
/// It requires a payload, so is registered as a `prototype` scope.
public protocol AutowiredFactory: Factory {<% for dep in 1..9 %>
    /// Associated type for dependency <%= dep %>.
    associatedtype Dep<%= dep %> = Void
<% end %>
    /// Associated type for payload.
    associatedtype _Payload: Payload

    /// Since autowiring by Type may lead to multiple candidates.
    /// The `qualifier` property is used to differentiate that.
    var qualifier: String? { get }

    /// Pre-generated initialize method for single payload
    /// constructor inject.
    init(payload: _Payload)
<%
  for dep in 1..9
    params = (1..dep).map { |i| "_ dep#{i}: Dep#{i}" }
    params_str = params.join(", ")
%>
    /// Pre-generated initialize method for <%= dep %> dependencies and single payload
    /// constructor inject.
    init(<%= params_str %>, payload: _Payload)
<% end %>
}
public extension AutowiredFactory {
    /// To supports type-inference of the compiler.
    public var payloadType: _Payload.Type { return _Payload.self }
    public var qualifier: String? { return nil }

    init(payload: _Payload) {
        self.init(payload: payload)
    }
<%
  for dep in 1..9
    params = (1..dep).map { |i| "_ dep#{i}: Dep#{i}" }
    params_str = params.join(", ")

    initializer = (1..dep).map { |i| "dep#{i}" }
    initializer_str = initializer.join(", ")
%>
    init(<%= params_str %>, payload: _Payload) {
        self.init(<%= initializer_str %>, payload: payload)
    }<% end %>
}
