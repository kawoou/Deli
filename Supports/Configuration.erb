//
//  Configuration.swift
//  Deli
//

/// The Configuration protocol makes the user can register Resolver.
public protocol Configuration: Inject {}
public extension Configuration {
<%
  for dep in 0..9
    generics = (1..dep).map { |i| "Dep#{i}" }
    generics_str = generics.join(", ")

    arguments = (1..dep).map { |i| "dep#{i}" }
    arguments_str = arguments.join(", ")
%>
    /// Register custom Resolver by developers.
    ///
    /// - Parameters:
    ///     - type: The dependency type to resolve.<% for arg in (1..dep) %>
    ///     - dependency<%= arg %>: Required dependency <%= arg %><% end %>
    ///     - qualifier: The qualifier.
    ///     - scope: It is specify the way that manages the lifecycle.
    ///       (default is .singleton)
    ///     - resolver: The closure to specify how to resolve with the
    ///       dependencies of the type.
    ///       It is invoked when needs to instantiate the instance.
    /// - Returns: The closure that resolve dependency type.
    static func Config<T<% if dep > 0 %>, <% end %><%= generics_str %>>(
        _ type: T.Type,<% for arg in (1..dep) %>
        _ dependency<%= arg %>: Dep<%= arg %>.Type,<% end %>
        qualifier: String = "",
        scope: Scope = .singleton,
        resolver: @escaping (<%= generics_str %>) -> T
    ) -> () -> T {
        return { () -> T in
            guard let instance = AppContext.shared.get(withoutResolve: T.self, qualifier: qualifier) else {<% for arg in (1..dep) %>
                let dep<%= arg %> = AppContext.shared.get(Dep<%= arg %>.self)!<% end %>
                return resolver(<%= arguments_str %>)
            }
            return instance
        }
    }
<% end %>
}
